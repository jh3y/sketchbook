@import 'normalize.css' layer(normalize);

@layer normalize, base, slider, animation, demo;

@layer demo {
  .slider {
    outline: 4px dashed hotpink;
    border-radius: 0;
    scale: 2;
  }

  .slider__track {
    width: 100%;
    position: relative;

    /* &::after {
      content: '';
      width: 2px;
      height: 100%;
      position: absolute;
      left: 50%;
      top: 50%;
      translate: -50% -50%;
      background: blue;
    } */
  }

  .track {
    height: 100%;
    /* Each quadrant needs to be longer to account for offsetting the blocks */
    width: 200cqi;
    position: absolute;
    top: 0;
    left: 50%;
  }
  .track__wrap {
    position: absolute;
    display: grid;
    grid-template-columns: repeat(auto-fit, 5cqi);
    align-items: center;
    justify-content: space-between;
    top: 0;
    left: 0;
    height: 100%;
    width: calc(100% + 5cqi);

    span {
      height: 20px;
      width: 4px;
      translate: -50% 0;
      border-radius: 100px;
      /* background: purple; */
      /* background: hsl(10 90% 50% / 0.5); */
      animation: highlight both linear;
      animation-timeline: view(inline);
      animation-range: cover;
      position: relative;
      /* opacity: 0.2; */

      &::after {
        content: '';
        position: absolute;
        top: 50%;
        left: 50%;
        translate: -50% -50%;
        width: 100%;
        height: calc(10px + (var(--active) * 10px));
        background: red;
        opacity: calc(0.25 + var(--active));
        transition: opacity calc((1- var(--active)) * 0.4s);
      }

      &:first-of-type,
      &:last-of-type,
      &:nth-of-type(10n + 1) {
        &::after {
          height: 20px;
        }
      }
    }
  }

  .track__holder {
    height: 100%;
    width: 100%;
    position: absolute;
    inset: 0;
    overflow: hidden;
  }

  @property --active {
    syntax: '<number>';
    inherits: true;
    initial-value: 0;
  }

  @keyframes highlight {
    50% {
      --active: 1;
    }
  }

  .track {
    outline: 2px dashed red;
    left: calc(50% + (var(--scroll-progress) * -1cqi));
  }
}

@layer animation {
  @supports (animation-timeline: scroll()) {
    :root {
      --transition: 0.625s;
      --ease: linear(
        0 0%,
        0.5007 7.21%,
        0.7803 12.29%,
        0.8883 14.93%,
        0.9724 17.63%,
        1.0343 20.44%,
        1.0754 23.44%,
        1.0898 25.22%,
        1.0984 27.11%,
        1.1014 29.15%,
        1.0989 31.4%,
        1.0854 35.23%,
        1.0196 48.86%,
        1.0043 54.06%,
        0.9956 59.6%,
        0.9925 68.11%,
        1 100%
      );
      timeline-scope: --thumb;
    }

    @property --scroll-progress {
      initial-value: 0;
      inherits: true;
      syntax: '<integer>';
    }

    @property --value {
      initial-value: -100;
      inherits: true;
      syntax: '<integer>';
    }

    .slider::before {
      content: 'Scroll: ' counter(scroll-progress);
      counter-set: scroll-progress var(--scroll-progress);
      position: absolute;
      top: calc(100px + 1lh);
      left: 1rem;
      color: canvasText;
    }
    .slider::after {
      content: 'Value: ' counter(progress);
      counter-set: progress var(--value);
      position: absolute;
      top: 100px;
      left: 1rem;
      color: canvasText;
    }

    .slider {
      timeline-scope: --thumb;
      animation: progress both linear;
      animation-direction: reverse;
      animation-timeline: --thumb;
      animation-range: contain;
    }
    @keyframes progress {
      to {
        --value: 200;
        --scroll-progress: 200;
      }
    }
    .slider input {
      overflow: hidden;
    }
    .slider ::-webkit-slider-thumb {
      view-timeline: --thumb inline;
    }
  }
}

@layer slider {
  :root {
    --width: 245;
  }
  .slider {
    --height: 2.625rem;
    display: flex;
    color: white;
    /* padding: 0 1.125rem; */
    width: calc(var(--width) * 1px);
    max-width: calc(100vw - 2rem);
    align-items: center;
  }

  .slider__track {
    height: var(--height);
    container-type: inline-size;
  }

  .slider__track input {
    width: 100%;
  }

  .slider [type='range'] {
    opacity: 1;
    height: var(--height);
    transition: translate var(--transition) var(--ease),
      opacity var(--transition) var(--ease);
  }

  .slider:has(:focus-visible) {
    outline: 4px solid red;
    outline-offset: 2px;
  }

  .slider [type='range']:hover {
    cursor: -webkit-grab;
  }

  .slider [type='range']:active {
    cursor: -webkit-grabbing;
  }

  .slider [type='range']::-webkit-slider-thumb {
    /* height: var(--height); */
    /* width: 48px; */
    margin-top: unset;
    opacity: 1;
  }

  .slider [type='range']::-webkit-slider-runnable-track {
    height: var(--height);
    background: hsl(10 0% 50% / 0.5);
  }

  .slider [type='range']::-moz-range-track {
    height: var(--height);
    background: hsl(10 0% 50% / 0.5);
  }

  /* [data-reveal='true'] .slider [type='range'] { */
  .slider [type='range'] {
    opacity: 1;
    translate: 0 -150%;
  }
  /* [data-reveal='true'] .slider [type='range']::-webkit-slider-thumb { */
  .slider [type='range']::-webkit-slider-thumb {
    opacity: 1;
    height: auto;
    margin-top: unset;
    width: unset;
  }

  /* [data-reveal='true'] .slider [type='range']::-webkit-slider-runnable-track { */
  .slider [type='range']::-webkit-slider-runnable-track {
    height: unset;
  }

  /* [data-reveal='true'] .slider [type='range']::-moz-range-track { */
  .slider [type='range']::-moz-range-track {
    height: unset;
  }
}

@layer base {
  html {
    color-scheme: light dark;
  }

  [data-theme='dark'] {
    color-scheme: dark;
  }

  [data-theme='light'] {
    color-scheme: light;
  }

  :root {
    --font-size-min: 16;
    --font-size-max: 20;
    --font-ratio-min: 1.2;
    --font-ratio-max: 1.33;
    --font-width-min: 375;
    --font-width-max: 1500;
  }

  :where(.fluid) {
    --fluid-min: calc(
      var(--font-size-min) * pow(var(--font-ratio-min), var(--font-level, 0))
    );
    --fluid-max: calc(
      var(--font-size-max) * pow(var(--font-ratio-max), var(--font-level, 0))
    );
    --fluid-preferred: calc(
      (var(--fluid-max) - var(--fluid-min)) /
        (var(--font-width-max) - var(--font-width-min))
    );
    --fluid-type: clamp(
      (var(--fluid-min) / 16) * 1rem,
      ((var(--fluid-min) / 16) * 1rem) -
        (((var(--fluid-preferred) * var(--font-width-min)) / 16) * 1rem) +
        (var(--fluid-preferred) * var(--variable-unit, 100vi)),
      (var(--fluid-max) / 16) * 1rem
    );
    font-size: var(--fluid-type);
  }

  *,
  *:after,
  *:before {
    box-sizing: border-box;
  }

  body {
    display: grid;
    place-items: center;
    min-height: 100vh;
    font-family: 'SF Pro Text', 'SF Pro Icons', 'AOS Icons', 'Helvetica Neue',
      Helvetica, Arial, sans-serif, system-ui;
  }

  body::before {
    --size: 45px;
    --line: color-mix(in lch, canvasText, transparent 70%);
    content: '';
    height: 100vh;
    width: 100vw;
    position: fixed;
    background: linear-gradient(
          90deg,
          var(--line) 1px,
          transparent 1px var(--size)
        )
        50% 50% / var(--size) var(--size),
      linear-gradient(var(--line) 1px, transparent 1px var(--size)) 50% 50% /
        var(--size) var(--size);
    mask: linear-gradient(-20deg, transparent 50%, white);
    top: 0;
    transform-style: flat;
    pointer-events: none;
    z-index: -1;
  }

  .bear-link {
    color: canvasText;
    position: fixed;
    top: 1rem;
    left: 1rem;
    width: 48px;
    aspect-ratio: 1;
    display: grid;
    place-items: center;
    opacity: 0.8;
  }

  :where(.x-link, .bear-link):is(:hover, :focus-visible) {
    opacity: 1;
  }

  .bear-link svg {
    width: 75%;
  }

  /* Utilities */
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border-width: 0;
  }
}
