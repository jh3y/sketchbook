@import "normalize.css" layer(normalize);
@import "open-props/style" layer(open-props);
@import "open-props/normalize" layer(open-props);
@import "../../../net/material-design-lite/mdl.css";

*,
*:after,
*:before {
	box-sizing: border-box;
}

body {
	display: flex;
  align-items: center;
  justify-content:center;
  flex-wrap: wrap;
  gap: var(--size-4);
	place-items: center;
	min-height: 100vh;
	background: var(--surface-2);
	font-family: 'Google Sans', sans-serif, system-ui;
}

ul {
	border-radius: var(--md-sys-shape-medium);
	width: 50vmin;
  min-width: 300px;
	aspect-ratio: 4 / 6;
	background: var(--gray-0);
	display: grid;
	padding: 0;
	margin: 0;
	padding: var(--size-4);
	gap: var(--size-4);
	grid-template-columns: repeat(4, 1fr);
	overflow: auto;
	list-style-type: none;
  transition: all 0.5s var(--ease-elastic-2);
}

.card.elevated {
	padding: 0;
	margin: 0;
	background-color: var(--blue-2);
	min-width: 0;
	transition: all 0.5s var(--ease-elastic-2);
}

.card .actions {
	display: grid;
	flex-direction: column;
	grid-template-columns: auto auto;
	gap: var(--size-2) var(--size-4);
}

.controls.card.elevated {
	background-color: var(--md-sys-color-surface);
}

.grid .card {
	aspect-ratio: 1;
	view-timeline-name: --card;
	animation: grid-in both, grid-out both;
	animation-delay: enter 0%, exit 0%;
	animation-timeline: --card;
	animation-end-delay: enter 100%, exit 100%;
	transform: scale(0.25);
}

@keyframes grid-in {
	to {
		transform: scale(1);
	}
}

@keyframes grid-out {
	to {
		transform: scale(0.25);
	}
}

.zipper .card {
	--distance: -250%;
	aspect-ratio: 1;
	view-timeline-name: --card;
	animation: zip-in both, zip-out both;
	animation-delay: enter 0%, exit 0%;
	animation-timeline: --card;
	animation-end-delay: enter 100%, exit 100%;
}

.zipper li:is(:nth-of-type(n):nth-child(4n),:nth-of-type(4n + 3):nth-child(n)) .card {
	--distance: 250%;
}

@keyframes zip-in {
	0% {
		transform: translateX(var(--distance, 250%)) scale(0);
	}
}

@keyframes zip-out {
	100% {
		transform: translateX(var(--distance, 250%)) scale(0);
	}
}

.rotater .card {
	aspect-ratio: 1;
	view-timeline-name: --card;
	animation: rotate-in both, rotate-out both;
	animation-delay: enter 0%, exit 0%;
	animation-timeline: --card;
	animation-end-delay: enter 100%, exit 100%;
}
.rotater li:nth-of-type(2n) .card {
	--rotation: -180;
	/*background: green;*/
}
.rotater li:nth-of-type(4n + 3):nth-child(n) .card {
	--rotation: 180;
	/*background: orange;*/
}
.rotater li:nth-of-type(n):nth-child(4n) .card {
	--rotation: 270;
	/*background: purple;*/
}

@keyframes rotate-in {
	0% {
		transform: rotate(calc(var(--rotation, -270) * 1deg)) scale(0.25);
	}
}
@keyframes rotate-out {
	100% {
		transform: rotate(calc(var(--rotation, -270) * 1deg)) scale(0.25);
	}
}

li {
	padding: 0;
}

.list li {
	min-height: 40px;
  height: 8vmin;
	grid-column: 1 / -1;
}

.list .card {
	height: 100%;
	transform: scaleX(0.25);
	view-timeline-name: --card;
	animation: list-in both, list-out both;
	animation-delay: enter 0%, exit 0%;
	animation-timeline: --card;
	animation-end-delay: enter 100%, exit 100%;
}

@keyframes list-in {
	to {
		transform: scaleX(1);
	}
}

@keyframes list-out {
	to {
		transform: scaleX(0.25);
	}
}

.horizontal {
	width: 75vmin;
	aspect-ratio: 4 / 2;
	display: flex;
}

.horizontal li {	
	min-width: 25%;
	grid-template-columns: repeat(auto-fit, 1fr);
}

.horizontal .card {
	height: 100%;
	animation: horizontal-in both;
	view-timeline-name: --card;
	view-timeline-axis: inline;
	animation-timeline: --card;
	animation-delay: cover 10%;
	animation-end-delay: cover 90%;
}

@keyframes horizontal-in {
	0%, 100% {
		transform: scaleY(0.25);
	}
	5%, 95% {
		transform: scaleY(1);
	}
}